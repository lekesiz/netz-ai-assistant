#!/usr/bin/env python3
"""
Load real company data into NETZ AI Assistant
"""

import os
import json
from datetime import datetime
from pathlib import Path
from qdrant_client import QdrantClient
from qdrant_client.models import PointStruct
from sentence_transformers import SentenceTransformer
import uuid

# Initialize
client = QdrantClient(url="http://localhost:6333")
encoder = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')
collection_name = "netz_documents"

print("üìö Loading Real Company Data into NETZ AI")
print("="*50)

# 1. Company Information
company_info = """
NETZ INFORMATIQUE - Informations Officielles

Raison sociale: NETZ INFORMATIQUE
Forme juridique: SASU (Soci√©t√© par Actions Simplifi√©e Unipersonnelle)
Capital social: 1 000,00 ‚Ç¨
SIRET: 810 351 353 00026
APE/NAF: 6202A - Conseil en syst√®mes et logiciels informatiques
TVA Intracommunautaire: FR67810351353

Si√®ge social:
3 Rue Jean Monnet
67201 ECKBOLSHEIM
France

Contact:
T√©l√©phone: +33 3 67 31 02 01
Email: contact@netzinformatique.fr
Site web: www.netzinformatique.fr

Dirigeant:
Mikail LEKESIZ - Pr√©sident

Date de cr√©ation: 23/02/2015

Activit√©s principales:
- Conseil en syst√®mes informatiques
- Maintenance et d√©pannage informatique
- Installation de mat√©riel informatique
- Formation informatique
- Solutions de sauvegarde et s√©curit√©
- Services cloud et virtualisation

Certifications et agr√©ments:
- Certification QUALIOPI (Actions de formation)
- Organisme de formation enregistr√© sous le n¬∞ 44670598567
- Partenaire Microsoft
- Partenaire OVHcloud

Horaires d'ouverture:
Lundi - Vendredi: 8h00 - 18h00
Support d'urgence: 24h/7j sur contrat

Zone d'intervention:
- Strasbourg et Eurom√©tropole
- Bas-Rhin (67)
- R√©gion Grand Est
- Intervention nationale sur demande
"""

# 2. Services d√©taill√©s
services_info = """
NETZ INFORMATIQUE - Catalogue des Services

1. MAINTENANCE INFORMATIQUE
- Maintenance pr√©ventive mensuelle
- Mise √† jour des syst√®mes
- Surveillance proactive
- Rapports mensuels d√©taill√©s
- Tarif: √Ä partir de 49‚Ç¨ HT/poste/mois
- SLA: Intervention sous 4h ouvr√©es

2. D√âPANNAGE INFORMATIQUE
- Diagnostic et r√©solution de pannes
- Intervention sur site ou √† distance
- R√©cup√©ration de donn√©es
- Remplacement de mat√©riel d√©fectueux
- Tarif: 60-120‚Ç¨ HT/heure selon urgence
- SLA: Intervention sous 2h en urgence

3. INSTALLATION & CONFIGURATION
- Installation de postes de travail
- Configuration r√©seau
- Mise en place de serveurs
- Installation d'imprimantes et p√©riph√©riques
- Tarif: Sur devis selon projet
- D√©lai: 1-5 jours selon disponibilit√©

4. S√âCURIT√â INFORMATIQUE
- Audit de s√©curit√©
- Installation antivirus/firewall
- Mise en place de sauvegardes
- Plan de reprise d'activit√© (PRA)
- Formation aux bonnes pratiques
- Tarif: Audit √† partir de 500‚Ç¨ HT

5. SOLUTIONS CLOUD
- Migration vers le cloud
- Office 365 / Google Workspace
- Sauvegarde cloud
- Travail collaboratif
- Tarif: Accompagnement √† partir de 300‚Ç¨ HT

6. FORMATION INFORMATIQUE
- Formation bureautique (Office, LibreOffice)
- Formation s√©curit√© informatique
- Formation outils collaboratifs
- Formation sur mesure
- Tarif: 400-800‚Ç¨ HT/jour selon effectif
- √âligible CPF et OPCO
"""

# 3. Tarifs et conditions
pricing_info = """
NETZ INFORMATIQUE - Grille Tarifaire 2025

TARIFS HORAIRES:
- Intervention standard (9h-18h): 60‚Ç¨ HT/heure
- Intervention urgente (2h): 90‚Ç¨ HT/heure
- Intervention soir/weekend: 120‚Ç¨ HT/heure
- T√©l√©maintenance: 50‚Ç¨ HT/heure

FORFAITS MAINTENANCE:
- BASIC (5 postes max): 245‚Ç¨ HT/mois
  * 1 intervention pr√©ventive/mois
  * Support t√©l√©phonique illimit√©
  * Mises √† jour incluses
  
- PRO (10 postes max): 450‚Ç¨ HT/mois
  * 2 interventions pr√©ventives/mois
  * Support prioritaire
  * Monitoring 24/7
  
- ENTERPRISE (illimit√©): Sur devis
  * Technicien d√©di√©
  * SLA personnalis√©
  * Astreinte incluse

FRAIS DE D√âPLACEMENT:
- Strasbourg et environs (< 10km): Gratuit
- 10-30 km: 0,50‚Ç¨/km
- > 30 km: Sur devis

CONDITIONS DE PAIEMENT:
- Paiement √† 30 jours
- Escompte 2% si paiement sous 10 jours
- P√©nalit√©s de retard: 3x taux l√©gal

GARANTIES:
- Mat√©riel neuf: Garantie constructeur + 1 an
- Main d'≈ìuvre: Garantie 3 mois
- Satisfaction: Remboursement si non satisfait sous 30 jours
"""

# Load data into vector database
def load_document(text, doc_type, doc_id):
    """Load a document into the vector database"""
    try:
        vector = encoder.encode(text)
        client.upsert(
            collection_name=collection_name,
            points=[
                PointStruct(
                    id=doc_id,
                    vector=vector.tolist(),
                    payload={
                        "text": text,
                        "metadata": {
                            "source": "company_data",
                            "type": doc_type,
                            "last_updated": datetime.now().isoformat()
                        }
                    }
                )
            ]
        )
        print(f"‚úÖ Loaded: {doc_type}")
        return True
    except Exception as e:
        print(f"‚ùå Error loading {doc_type}: {str(e)}")
        return False

# Load all documents
print("\nLoading documents...")
load_document(company_info, "company_information", str(uuid.uuid4()))
load_document(services_info, "services_catalog", str(uuid.uuid4()))
load_document(pricing_info, "pricing_and_terms", str(uuid.uuid4()))

# 4. Load some real file examples from Google Drive
drive_path = Path(os.getenv('GOOGLE_DRIVE_PATH', '/Users/mikail/Library/CloudStorage/GoogleDrive-mikail@netzinformatique.fr/Drive\'ƒ±m'))

if drive_path.exists():
    print(f"\nScanning Google Drive: {drive_path}")
    
    # Look for important documents
    important_folders = ['ADMINISTRATIF', 'COMPTABILITE', 'CLIENTS', 'PROCEDURES']
    loaded_files = 0
    max_files = 5
    
    for folder in important_folders:
        if loaded_files >= max_files:
            break
            
        folder_path = drive_path / folder
        if folder_path.exists():
            print(f"üìÅ Checking folder: {folder}")
            
            # Find text files
            for file_path in folder_path.glob('*.txt'):
                if loaded_files >= max_files:
                    break
                    
                try:
                    content = file_path.read_text(encoding='utf-8', errors='ignore')
                    if len(content) > 100:  # Skip empty files
                        doc_id = str(uuid.uuid4())
                        load_document(
                            content[:2000],  # First 2000 chars
                            f"google_drive_{folder.lower()}",
                            doc_id
                        )
                        loaded_files += 1
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  Could not read {file_path.name}: {e}")

print(f"\n‚úÖ Loaded {loaded_files} files from Google Drive")

# Summary
print("\n" + "="*50)
print("‚úÖ Real company data has been loaded!")
print("\nYou can now ask questions like:")
print("- Quels sont nos tarifs de maintenance ?")
print("- Quelle est l'adresse de NETZ Informatique ?")
print("- Quels services proposons-nous ?")
print("- Quel est le num√©ro SIRET ?")
print("- Quelles sont nos certifications ?")