version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: netz-postgres
    environment:
      POSTGRES_USER: netzai
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: netzai_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netzai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: netz-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: netz-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    restart: unless-stopped

  # Keycloak Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: netz-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak_db
      KC_DB_USERNAME: netzai
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    command:
      - start
      - --optimized
      - --import-realm
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm.json
    restart: unless-stopped

  # Kong API Gateway
  kong-migrations:
    image: kong:3.5
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_DATABASE: kong_db
      KONG_PG_USER: netzai
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  kong:
    image: kong:3.5
    container_name: netz-kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_DATABASE: kong_db
      KONG_PG_USER: netzai
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml
    restart: unless-stopped

  # vLLM Server
  vllm:
    build:
      context: ./vllm
      dockerfile: Dockerfile
    container_name: netz-vllm
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      HUGGING_FACE_HUB_TOKEN: ${HF_TOKEN}
    volumes:
      - ${MODEL_PATH}:/models
    command: >
      python -m vllm.entrypoints.openai.api_server
      --model /models/mistral-7b-instruct-v0.2
      --host 0.0.0.0
      --port 8888
      --max-model-len 8192
      --gpu-memory-utilization 0.9
      --trust-remote-code
    ports:
      - "8888:8888"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: netz-api
    environment:
      DATABASE_URL: postgresql://netzai:${POSTGRES_PASSWORD}@postgres:5432/netzai_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      QDRANT_URL: http://qdrant:6333
      VLLM_URL: http://vllm:8888
      KEYCLOAK_URL: http://keycloak:8080
      JWT_SECRET: ${JWT_SECRET}
      ENVIRONMENT: production
    volumes:
      - ./api:/app
      - api_logs:/app/logs
    ports:
      - "8002:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
      - vllm
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery-worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: netz-celery-worker
    environment:
      DATABASE_URL: postgresql://netzai:${POSTGRES_PASSWORD}@postgres:5432/netzai_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/1
    volumes:
      - ./api:/app
      - worker_logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    command: celery -A app.celery worker --loglevel=info

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: netz-celery-beat
    environment:
      DATABASE_URL: postgresql://netzai:${POSTGRES_PASSWORD}@postgres:5432/netzai_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - ./api:/app
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: netz-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://kong:8000
      NEXT_PUBLIC_KEYCLOAK_URL: http://keycloak:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: netz
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: netz-frontend
    ports:
      - "3000:3000"
    depends_on:
      - api
      - kong
    restart: unless-stopped

  # RabbitMQ (Alternative to Redis for task queue)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: netz-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: netzai
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  rabbitmq_data:
  api_logs:
  worker_logs:

networks:
  default:
    name: netz-network